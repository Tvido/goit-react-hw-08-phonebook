{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","redux/contacts/contacts-reducer.js","redux/store.js","components/routes.js","components/Navigation/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav/AuthNav.js","components/AppBar/AppBar.js","components/Container/Container.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContacts","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","authActions","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","name","email","user","createReducer","_","payload","token","setError","error","isAuthenticated","combineReducers","axios","defaults","baseURL","headers","common","Authorization","authOperations","register","credentials","dispatch","a","post","response","data","message","logOut","logIn","getCurrentUser","getState","persistedToken","auth","get","authSelectors","getIsAuthenticated","state","getUsermail","items","map","contact","includes","alert","filter","id","loading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contacts","contactsReducer","reduxStore","persistor","persistStore","routes","HomeView","RegisterView","LoginView","ContactsView","connect","className","activeClassName","to","exact","mapDispatchToProps","onLogout","type","onClick","AuthNav","Container","children","Component","component","redirectTo","routeProps","render","props","restricted","lazy","NotFoundView","App","this","onGetCurrentUser","fallback","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbf8f7a9.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\n\nexport const filterContacts = createAction('contacts/Filter');\n\n","import { createAction } from '@reduxjs/toolkit';\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\n const authActions = {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n\nexport default authActions","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, {payload}) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_,  {payload} ) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\nconst setError = (_, { payload }) => payload;\n\nconst error = createReducer(null, {\n  [authActions.registerError]: setError,\n  [authActions.loginError]: setError,\n  [authActions.logoutError]: setError,\n  [authActions.getCurrentUserError]: setError,\n});\n\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.logoutSuccess]: () => false,\n});\n\nexport default combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error,\n});","import axios from 'axios';\nimport authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n/*\n * POST @ /users/signup\n * body { name, email, password }\n *\n * После успешной регистрации добавляем токен в HTTP-заголовок\n */\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest())\n  \n  try {\n\n    const response = await axios.post('/users/signup', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data))\n  } catch (error) {\n\n    dispatch(authActions.registerError(error.message));\n  }\n}\n/*\n * POST @ /users/login\n * body:\n *    { email, password }\n *\n * После успешного логина добавляем токен в HTTP-заголовок\n */\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n  \n  try {\n\n    const response = await axios.post('/users/login', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\n/*\n * POST @ /users/logout\n * headers:\n *    Authorization: Bearer token\n *\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\n */\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n  \n  try {\n    await axios.post('/users/logout');\n\n    token.unset();\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\n/*\n * GET @ /users/current\n * headers:\n *    Authorization: Bearer token\n *\n * 1. Забираем токен из стейта через getState()\n * 2. Если токена нет, выходим не выполняя никаких операций\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\n */\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get('/users/current');\n\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\n\nconst authOperations = { register, logOut, logIn, getCurrentUser };\n\nexport default authOperations;","const getIsAuthenticated = state => state.auth.isAuthenticated\n\nconst getUsermail = state => state.auth.user.email;\n\n const authSelectors = {\n  getIsAuthenticated,\n  getUsermail,\n};\n\nexport default authSelectors;","import { combineReducers } from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    filterContacts\n } from './contacts-actions'\n\n\nconst items = createReducer([], {\n    [fetchContactsSuccess]: (state, { payload }) => payload,\n    \n    [addContactSuccess]: (state, { payload }) => state.map(contact => contact.name).includes(payload.name)\n    ? alert(`${payload.name} is already in contacts.`)\n    : [payload, ...state],\n  \n    \n    [deleteContactSuccess]: (state, { payload }) => state.filter(contact => contact.id !== payload),\n})\n\nconst loading = createReducer(false, {\n    [fetchContactsRequest]: () => true,\n    [fetchContactsSuccess]: () => false,\n    [fetchContactsError]: () => false,\n\n    [addContactRequest]: () => true,\n    [addContactSuccess]: () => false,\n    [addContactError]: () => false,\n\n    [deleteContactRequest]: () => true,\n    [deleteContactSuccess]: () => false,\n    [deleteContactError]: () => false,\n})\n\nconst filter = createReducer('', {\n    [filterContacts]: (state, { payload }) => payload,\n})\n\nconst error = createReducer(null, {})\n\nexport default combineReducers({\n    items,\n    filter,\n    loading,\n    error,\n})","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport logger from 'redux-logger';\nimport contactsReducer from \"./contacts/contacts-reducer\";\nimport { authReducer } from './auth';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from 'redux-persist/lib/storage';\n\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n}),\n\n    logger\n];\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),       \n    contacts: contactsReducer,\n  },\n    \n  middleware,\n});\n\nconst persistor = persistStore(store)\n\nconst reduxStore = { store, persistor };\n\nexport default reduxStore","const routes =  {\n    HomeView: '/',\n    RegisterView: '/register',\n    LoginView: '/login',\n    ContactsView: '/contacts'\n}\n\nexport default routes","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../routes';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../../redux/auth';\n\nimport './Navigation.css';\n\nconst Navigation = ({ isAuthenticated }) => (\n  <nav>\n    <NavLink\n      className=\"navigation__link\"\n      activeClassName=\"navigation__activeLink\"\n      to={routes.HomeView}\n      exact\n    >\n      HOME\n    </NavLink>\n\n    {isAuthenticated && (\n      <NavLink\n        className=\"navigation__link\"\n        activeClassName=\"navigation__activeLink\"\n        to={routes.ContactsView}\n        exact\n      >\n        CONTACTS\n      </NavLink>\n    )}\n  </nav>\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(Navigation);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { authSelectors, authOperations } from '../../redux/auth';\n\nimport './UserMenu.css';\n\nconst UserMenu = ({ email, onLogout }) => (\n  <div className=\"userMenu__container\">\n    <p className=\"userMenu__email\">{email}</p>\n    <button className=\"userMenu__button\" type=\"button\" onClick={onLogout}>\n      Logout\n    </button>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  email: authSelectors.getUsermail(state),\n});\n\nconst mapDispatchToProps = {\n  onLogout: authOperations.logOut,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../routes';\n\nimport './AuthNav.css';\n\nconst AuthNav = () => (\n  <div>\n    <NavLink\n      className=\"authNav__link\"\n      activeClassName=\"authNav__activeLink\"\n      to={routes.RegisterView}\n      exact\n    >\n      REGISTRATION\n    </NavLink>\n    <NavLink\n      className=\"authNav__link\"\n      activeClassName=\"authNav__activeLink\"\n      to={routes.LoginView}\n      exact\n    >\n      LOGIN\n    </NavLink>\n  </div>\n);\n\nexport default AuthNav;\n","import React from 'react';\n\nimport Navigation from '../Navigation';\nimport UserMenu from '../UserMenu';\nimport AuthNav from '../AuthNav';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../../redux/auth';\n\nimport './AppBar.css';\n\nconst AppBar = ({ isAuthenticated }) => (\n  <header className=\"appBar__header\">\n    <Navigation />\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\n  </header>\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(AppBar);\n","import React from 'react';\n\nimport './Container.css';\n\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\n\nexport default Container;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\nconst PrivateRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\nconst PublicRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated && routeProps.restricted ? (\n        <Redirect to={redirectTo} />\n      ) : (\n        <Component {...props} />\n      )\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import React, { Component, Suspense, lazy } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch } from 'react-router-dom';\nimport AppBar from './components/AppBar/AppBar';\nimport Container from './components/Container';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\nimport { authOperations } from './redux/auth';\n\nimport './App.css';\n\nconst HomeView = lazy(() => import('./views/HomeView'));\nconst RegisterView = lazy(() => import('./views/RegisterView'));\nconst LoginView = lazy(() => import('./views/LoginView'));\nconst ContactsView = lazy(() => import('./views/ContactsView'));\nconst NotFoundView = lazy(() => import('./views/NotFoundView'));\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <Container>\n        <AppBar />\n\n        <Suspense fallback={<p>Loading...</p>}>\n          <Switch>\n            <PublicRoute exact path=\"/\" component={HomeView} />\n            <PublicRoute\n              path=\"/register\"\n              restricted\n              component={RegisterView}\n              redirectTo=\"/contacts\"\n            />\n            <PublicRoute\n              path=\"/login\"\n              restricted\n              component={LoginView}\n              redirectTo=\"/contacts\"\n            />\n            <PrivateRoute\n              path=\"/contacts\"\n              component={ContactsView}\n              redirectTo=\"/login\"\n            />\n            <PublicRoute component={NotFoundView} />\n          </Switch>\n        </Suspense>\n      </Container>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport reduxStore from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './App';\n\n\nReactDOM.render(\n  \n  <React.StrictMode>  \n    <Provider store={reduxStore.store}>\n      <PersistGate loading={null} persistor={reduxStore.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate> \n    </Provider>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}