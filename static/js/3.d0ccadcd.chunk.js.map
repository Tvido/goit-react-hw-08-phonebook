{"version":3,"sources":["../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"names":["alphabet","require","module","exports","id","length","RegExp","get","replace","test","contactsOperations","addContact","name","number","dispatch","a","contact","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","fetchContacts","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","ContactForm","state","nameInputId","shortid","generate","numberInputId","handleInput","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","this","htmlFor","type","pattern","title","required","onChange","Component","connect","getLoading","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","onDeleteContact","map","onClick","filterContacts","target","ContactsView","formSubmitHandler","isLoadingContacts","previousSeed","shuffled","randomFromSeed","ORIGINAL","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step"],"mappings":"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","file":"static/js/3.d0ccadcd.chunk.js","sourcesContent":["'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","import axios from 'axios';\nimport {\n    fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n} from './contacts-actions';\n\nconst fetchContacts = () =>  async dispatch => {\n    dispatch(fetchContactsRequest());\n\n    try {\n        const { data } = await axios.get('/contacts');\n        dispatch(fetchContactsSuccess(data));\n    } catch (error) {\n        dispatch(fetchContactsError(error.message));\n    }\n\n    // axios\n    //     .get('/contacts')\n    //     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    //     .catch(error => dispatch(fetchContactsError(error)));\n}\n\nconst addContact = ({ name, number }) => async dispatch => {\n    const contact = { name, number };\n    \n    dispatch(addContactRequest);\n\n    try {\n        const { data } = await axios.post('/contacts', contact);\n        dispatch(addContactSuccess(data));\n    } catch (error) {\n        dispatch(addContactError(error.message));\n    }\n}\n\nconst deleteContact = contactId => async dispatch => {\n    dispatch(deleteContactRequest());\n\n    try {\n        await axios.delete(`/contacts/${contactId}`);\n        dispatch(deleteContactSuccess(contactId));\n    } catch (error) {\n        dispatch(deleteContactError(error.message));\n    }\n}\n\nconst contactsOperations = { addContact, deleteContact, fetchContacts };\n \nexport default contactsOperations;","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\n\nimport './ContactsForm.css';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleInput = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"\" onSubmit={this.handleSubmit}>\n        <label className=\"contacts__form-item\" htmlFor={this.nameInputId}>\n          Name\n          <input\n            className=\"contacts__form-text\"\n            type=\"text\"\n            value={this.state.name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleInput}\n            id={this.nameInputId}\n          />\n        </label>\n\n        <label className=\"contacts__form-item\" htmlFor={this.numberInputId}>\n          Number\n          <input\n            className=\"contacts__form-text\"\n            type=\"tel\"\n            value={this.state.number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleInput}\n            id={this.numberInputId}\n          />\n        </label>\n        <button className=\"contacts__form-button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getLoading = state => state.contacts.loading;\nexport const getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\n\n\nexport const getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter= filter.toLowerCase();\n\n        return contacts.filter(contact=>\n            contact.name.toLowerCase().includes(normalizedFilter),\n        );\n    },\n);\n\n// export const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state)\n//     const filter = getFilter(state);\n//     const normalizedFilter= filter.toLowerCase();\n\n//     return contacts.filter(contact=>\n//     contact.name.toLowerCase().includes(normalizedFilter));\n// };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nimport './ContactsList.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <ul className=\"contacts__list\">\n    {contacts.map(({ id, name, number }) => (\n      <li className=\"contacts__list-item\" key={id}>\n        <p>\n          {name}: {number}\n        </p>\n        <button\n          className=\"contacts__list-button\"\n          type=\"button\"\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nimport './Filter.css';\n\nconst Filter = ({ value, onChange }) => (\n  <div>\n    <label className=\"filter\">\n      Find contacts by name\n      <input className=\"\" type=\"text\" value={value} onChange={onChange} />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  // value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(filterContacts(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\nimport { contactsOperations } from '../redux/contacts';\nimport { getLoading } from '../redux/contacts/contacts-selectors';\n\nimport './ContactsView.css';\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"contactsView__container\">\n        <h1 className=\"contactsView__title\">Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2 className=\"contactsView__title\">Contacts</h2>\n        <Filter />\n        {this.props.isLoadingContacts && (\n          <h1 className=\"contactsView__title\">Loading</h1>\n        )}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"sourceRoot":""}